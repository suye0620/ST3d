df$slice <- (forloop.counter-1)
df$z <- z_scale*(forloop.counter-1)
list_df[[forloop.counter]] <- df
}
df_plot <- dplyr::bind_rows(list_df)
return(df_plot)
}
df_plot <- Alignment_3Dplot(list_slices = new_slices)
# 传入plot_ly是三个变量，所有的点被连在了一起
plot_ly(df_plot, x = ~x, y = ~y, z = ~z) %>%
add_markers(color=~clusters) %>%
filter(slice0index==3,slice1_index=5) %>%
add_lines(x = ~x, y = ~y, z = ~z)
# 传入plot_ly是三个变量，所有的点被连在了一起
plot_ly(df_plot, x = ~x, y = ~y, z = ~z) %>%
add_markers(color=~clusters) %>%
filter(slice0index==3,slice1_index==5) %>%
add_lines(x = ~x, y = ~y, z = ~z)
# 传入plot_ly是三个变量，所有的点被连在了一起
plot_ly(df_plot, x = ~x, y = ~y, z = ~z) %>%
add_markers(color=~clusters) %>%
filter(slice0_index==3,slice1_index==5) %>%
add_lines(x = ~x, y = ~y, z = ~z)
# 传入plot_ly是三个变量，所有的点被连在了一起
plot_ly(df_plot, x = ~x, y = ~y, z = ~z) %>%
add_markers(color=~clusters) %>%
filter(slice0_index==3,slice1_index==5) %>%
add_paths(x = ~x, y = ~y, z = ~z)
# 传入plot_ly是三个变量，所有的点被连在了一起
plot_ly(df_plot, x = ~x, y = ~y, z = ~z) %>%
add_markers(color=~clusters) %>%
filter(slice0_index==3,slice1_index==5)
# 传入plot_ly是三个变量，所有的点被连在了一起
a <- plot_ly(df_plot, x = ~x, y = ~y, z = ~z) %>%
add_markers(color=~clusters) %>%
filter(slice0_index==3,slice1_index==5)
View(a)
# 传入plot_ly是三个变量，所有的点被连在了一起
a <- plot_ly(df_plot) %>%
add_markers(x = ~x, y = ~y, z = ~z,color=~clusters) %>%
filter(slice0_index==3,slice1_index==5) %>%
add_paths(x = ~x, y = ~y, z = ~z)
plotly_data(a)
# 传入plot_ly是三个变量，所有的点被连在了一起
a <- plot_ly(df_plot) %>%
add_markers(x = ~x, y = ~y, z = ~z,color=~clusters) %>%
filter(slice0_index==3|slice1_index==5) %>%
add_paths(x = ~x, y = ~y, z = ~z)
plotly_data(a)
# 传入plot_ly是三个变量，所有的点被连在了一起
a <- plot_ly(df_plot) %>%
add_markers(x = ~x, y = ~y, z = ~z,color=~clusters) %>%
filter(slice0_index==3|slice1_index==5) %>%
add_lines(x = ~x, y = ~y, z = ~z)
# 传入plot_ly是三个变量，所有的点被连在了一起
a <- plot_ly(df_plot) %>%
add_markers(x = ~x, y = ~y, z = ~z,color=~clusters) %>%
filter(slice0_index==3|slice1_index==5) %>%
add_lines(x = ~x, y = ~y, z = ~z)
a
# 传入plot_ly是三个变量，所有的点被连在了一起
plot_ly(df_plot) %>%
add_markers(x = ~x, y = ~y, z = ~z,color=~clusters) %>%
filter(slice0_index==3|slice1_index==5) %>%
add_trace(x = ~x, y = ~y, z = ~z,
line = list(color = 'bcbd22', width = 1))
?filter
# 传入plot_ly是三个变量，所有的点被连在了一起
plot_ly(df_plot) %>%
add_markers(x = ~x, y = ~y, z = ~z,color=~clusters) %>%
filter(!!rlang::parse_expr("slice0_index==3|slice1_index==5")) %>%
add_trace(x = ~x, y = ~y, z = ~z,
line = list(color = '#bcbd22', width = 1))
# 传入plot_ly是三个变量，所有的点被连在了一起
plot_ly(df_plot) %>%
add_markers(x = ~x, y = ~y, z = ~z,color=~clusters) %>%
filter(!!rlang::parse_expr("slice0_index==3|slice1_index==5")) %>%
add_trace(x = ~x, y = ~y, z = ~z,
line = list(color = '#bcbd22', width = 3))
# 传入plot_ly是三个变量，所有的点被连在了一起
plot_ly(df_plot) %>%
add_markers(x = ~x, y = ~y, z = ~z,color=~clusters) %>%
filter(!!rlang::parse_expr("slice0_index==3|slice1_index==5")) %>%
add_trace(x = ~x, y = ~y, z = ~z,
line = list(color = '#bcbd22', width = 3),
name="")
# 传入plot_ly是三个变量，所有的点被连在了一起
plot_ly(df_plot) %>%
add_markers(x = ~x, y = ~y, z = ~z,color=~clusters) %>%
filter(!!rlang::parse_expr("slice0_index==3|slice1_index==5")) %>%
add_trace(x = ~x, y = ~y, z = ~z,
line = list(color = '#bcbd22', width = 3),
name="",showlegend=F)
# 传入plot_ly是三个变量，所有的点被连在了一起
plot_ly(df_plot) %>%
add_markers(x = ~x, y = ~y, z = ~z,color=~clusters) %>%
filter(!!rlang::parse_expr("slice0_index==3|slice1_index==5")) %>%
add_trace(x = ~x, y = ~y, z = ~z,
line = list(color = '#bcbd22', width = 3),
mode="lines",
name="",showlegend=F)
# 传入plot_ly是三个变量，所有的点被连在了一起
plot_ly(df_plot) %>%
add_markers(x = ~x, y = ~y, z = ~z,color=~clusters) %>%
filter(!!rlang::parse_expr("slice0_index==3|slice1_index==5")) %>%
add_trace(x = ~x, y = ~y, z = ~z,
line = list(color = 'grey10', width = 3,dash='longdash'),
mode="lines",
name="",showlegend=F)
# 传入plot_ly是三个变量，所有的点被连在了一起
plot_ly(df_plot) %>%
add_markers(x = ~x, y = ~y, z = ~z,color=~clusters) %>%
filter(!!rlang::parse_expr("slice0_index==3|slice1_index==5")) %>%
add_trace(x = ~x, y = ~y, z = ~z,
line = list(color = 'black', width = 3,dash='longdash'),
mode="lines",
name="",showlegend=F)
source("./.Rprofile")
source("./.Rprofile")
get_positive_mapping(patient_2_align01)
T|F
?sprintf
sprintf("%s %d", "test", 1:3)
a <- sprintf("%s %s",1:2)
a <- sprintf("%s %s","test")
a <- sprintf("%s %s",c("test",,"test1"))
a <- sprintf("%s %s",c("test","test1"))
add_lines_between_2slices <- function(index1,index2){
f <- filter(!!rlang::parse_expr(paste0("slice0_index==",index1,
"|slice1_index==",index2))) %>%
add_trace(x = ~x, y = ~y, z = ~z,
line = list(color = 'black', width = 3,dash='longdash'),
mode="lines",
name="",showlegend=F)
return(f)
}
add_lines_between_2slices <- function(plot,index1,index2){
p <- plot %>% filter(!!rlang::parse_expr(paste0("slice0_index==",index1,
"|slice1_index==",index2))) %>%
add_trace(x = ~x, y = ~y, z = ~z,
line = list(color = 'black', width = 3,dash='longdash'),
mode="lines",
name="",showlegend=F)
return(p)
}
# 传入plot_ly是三个变量，所有的点被连在了一起
plot_ly(df_plot) %>%
add_markers(x = ~x, y = ~y, z = ~z,color=~clusters) %>%
add_fun(fun = add_lines_between_2slices(3,5))
# 传入plot_ly是三个变量，所有的点被连在了一起
plot_ly(df_plot) %>%
add_markers(x = ~x, y = ~y, z = ~z,color=~clusters) %>%
add_fun(fun = add_lines_between_2slices(plot=.,3,5))
# 传入plot_ly是三个变量，所有的点被连在了一起
plot_ly(df_plot) %>%
add_markers(x = ~x, y = ~y, z = ~z,color=~clusters) %>%
add_fun(p=.,fun = add_lines_between_2slices(plot=.,3,5))
add_lines_between_2slices <- function(plot,index1,index2){
p <- plot %>% filter(!!rlang::parse_expr(paste0("slice0_index==",index1,
"|slice1_index==",index2))) %>%
add_trace(x = ~x, y = ~y, z = ~z,
line = list(color = 'black', width = 3,dash='longdash'),
mode="lines",
name="",showlegend=F)
return(p)
}
# 传入plot_ly是三个变量，所有的点被连在了一起
plot_ly(df_plot) %>%
add_markers(x = ~x, y = ~y, z = ~z,color=~clusters) %>%
add_fun(p=.,add_lines_between_2slices(plot=.,3,5))
# 传入plot_ly是三个变量，所有的点被连在了一起
plot_ly(df_plot) %>%
add_markers(x = ~x, y = ~y, z = ~z,color=~clusters) %>%
add_fun(function(plot,index1=3,index2=5){
plot %>% filter(!!rlang::parse_expr(paste0("slice0_index==",index1,
"|slice1_index==",index2))) %>%
add_trace(x = ~x, y = ~y, z = ~z,
line = list(color = 'black', width = 3,dash='longdash'),
mode="lines",
name="",showlegend=F)
})
list_mappings <- list(
get_positive_mapping(patient_2_align01),
get_positive_mapping(patient_2_align12)
)
View(list_mappings)
list_mappings[[1]]
list_mappings <- list(
"slice0_slice1"=get_positive_mapping(patient_2_align01),
"slice1_slice2"=get_positive_mapping(patient_2_align12)
)
View(list_mappings)
str_split_1("slice0_slice1","_")
a,b=str_split_1("slice0_slice1","_")
c(a,b)=str_split_1("slice0_slice1","_")
str_split_1("slice0_slice1","_")[1]
str_split_1("slice0_slice1","_")[2]
for (m in list_mappings[["slice0_slice1"]]) {
print(m)
}
View(list_mappings)
list_mappings[["slice0_slice1"]]
list_mappings[["slice0_slice1"]][:1]
list_mappings[["slice0_slice1"]][1,:]
list_mappings[["slice0_slice1"]][1,]
list_mappings[["slice0_slice1"]][1,1]
list_mappings[["slice0_slice1"]][1,2]
View(df_plot)
p <- plot_ly(df_plot) %>%
add_markers(x = ~x, y = ~y, z = ~z,color=~clusters)
for (mapping in names(list_mappings)){
slice_split <- str_split_1(mapping,"_")
first_slice <- slice_split[1]
second_slice <- slice_split[2]
for (m in 1:nrow(list_mappings[[mapping]]) ) {
p <- p %>% add_fun(function(plot){
plot %>% filter(!!rlang::parse_expr(paste0(first_slice,"_index==",
list_mappings[[mapping]][1,1],
"|",
second_slice,"_index==",
list_mappings[[mapping]][1,2]))) %>%
add_trace(x = ~x, y = ~y, z = ~z,
line = list(color = 'black', width = 3,dash='longdash'),
mode="lines",
name="",showlegend=F)
})
}
}
p
p <- plot_ly(df_plot) %>%
add_markers(x = ~x, y = ~y, z = ~z,color=~clusters,mode="marker")
p
p <- plot_ly(df_plot,type = 'scatter3d') %>%
add_markers(x = ~x, y = ~y, z = ~z,color=~clusters)
View(patient_2_align01)
View(list_mappings)
for (m in 1:nrow(list_mappings[[1]]) ) {
p <- p %>% add_fun(function(plot){
plot %>% filter(!!rlang::parse_expr(paste0("slice0","_index==",
list_mappings[[1]][1,1],
"|",
"slice1","_index==",
list_mappings[[1]][1,2]))) %>%
add_trace(x = ~x, y = ~y, z = ~z,
line = list(color = 'black', width = 3,dash='longdash'),
mode="lines",
name="",showlegend=F)
})
}
p
for (m in 1:nrow(list_mappings[[1]]) ) {
p <- p %>% add_fun(function(plot){
plot %>% filter(!!rlang::parse_expr(paste0("slice0","_index==",
list_mappings[[1]][1,1],
"|",
"slice1","_index==",
list_mappings[[1]][1,2]))) %>%
add_trace(x = ~x, y = ~y, z = ~z,
line = list(color = 'black', width = 3,dash='longdash'),
mode="lines",
name="",showlegend=F)
})
p
}
for (m in 1:nrow(list_mappings[[1]]) ) {
p <- p %>% add_fun(function(plot){
plot %>% filter(!!rlang::parse_expr(paste0("slice0","_index==",
list_mappings[[1]][1,1],
"|",
"slice1","_index==",
list_mappings[[1]][1,2]))) %>%
add_trace(x = ~x, y = ~y, z = ~z,
line = list(color = 'black', width = 3,dash='longdash'),
mode="lines",
name="",showlegend=F)
})
show(p)
}
for (m in 1:nrow(list_mappings[[1]][1:4,]) ) {
p <- p %>% add_fun(function(plot){
plot %>% filter(!!rlang::parse_expr(paste0("slice0","_index==",
list_mappings[[1]][1,1],
"|",
"slice1","_index==",
list_mappings[[1]][1,2]))) %>%
add_trace(x = ~x, y = ~y, z = ~z,
line = list(color = 'black', width = 3,dash='longdash'),
mode="lines",
name="",showlegend=F)
})
show(p)
}
# 传入plot_ly是三个变量，所有的点被连在了一起
plot_ly(df_plot) %>%
add_markers(x = ~x, y = ~y, z = ~z,color=~clusters) %>%
add_fun(function(plot,index1=3,index2=5){
plot %>% filter(!!rlang::parse_expr(paste0("slice0_index==",index1,
"|slice1_index==",index2))) %>%
add_trace(x = ~x, y = ~y, z = ~z,
line = list(color = 'black', width = 3,dash='longdash'),
mode="lines",
name="",showlegend=F)
}) %>%
add_fun(function(plot,index1=6,index2=7){
plot %>% filter(!!rlang::parse_expr(paste0("slice0_index==",index1,
"|slice1_index==",index2))) %>%
add_trace(x = ~x, y = ~y, z = ~z,
line = list(color = 'black', width = 3,dash='longdash'),
mode="lines",
name="",showlegend=F)
})
for (m in 1:nrow(list_mappings[[1]][1:4,]) ) {
p <- add_fun(p,function(plot){
plot %>% filter(!!rlang::parse_expr(paste0("slice0","_index==",
list_mappings[[1]][1,1],
"|",
"slice1","_index==",
list_mappings[[1]][1,2]))) %>%
add_trace(x = ~x, y = ~y, z = ~z,
line = list(color = 'black', width = 3,dash='longdash'),
mode="lines",
name="",showlegend=F)
})
}
p
for (mapping in names(list_mappings)){
slice_split <- str_split_1(mapping,"_")
first_slice <- slice_split[1]
second_slice <- slice_split[2]
for (m in 1:nrow(list_mappings[[mapping]][1:4,]) ) {
print(list_mappings[[mapping]][m,1])
# p <- p %>% add_fun(function(plot){
#   plot %>% filter(!!rlang::parse_expr(paste0(first_slice,"_index==",
#                                              list_mappings[[mapping]][1,1],
#                                              "|",
#                                              second_slice,"_index==",
#                                              list_mappings[[mapping]][1,2]))) %>%
#     add_trace(x = ~x, y = ~y, z = ~z,
#               line = list(color = 'black', width = 3,dash='longdash'),
#               mode="lines",
#               name="",showlegend=F)
# })
}
}
View(list_mappings)
for (mapping in names(list_mappings)){
slice_split <- str_split_1(mapping,"_")
first_slice <- slice_split[1]
second_slice <- slice_split[2]
for (m in 1:nrow(list_mappings[[mapping]][1:4,]) ) {
p <- p %>% add_fun(function(plot){
plot %>% filter(!!rlang::parse_expr(paste0(first_slice,"_index==",
list_mappings[[mapping]][m,1],
"|",
second_slice,"_index==",
list_mappings[[mapping]][m,2]))) %>%
add_trace(x = ~x, y = ~y, z = ~z,
line = list(color = 'black', width = 3,dash='longdash'),
mode="lines",
name="",showlegend=F)
})
}
}
p
for (mapping in names(list_mappings)){
slice_split <- str_split_1(mapping,"_")
first_slice <- slice_split[1]
second_slice <- slice_split[2]
for (m in 1:nrow(list_mappings[[mapping]]) ) {
p <- p %>% add_fun(function(plot){
plot %>% filter(!!rlang::parse_expr(paste0(first_slice,"_index==",
list_mappings[[mapping]][m,1],
"|",
second_slice,"_index==",
list_mappings[[mapping]][m,2]))) %>%
add_trace(x = ~x, y = ~y, z = ~z,
line = list(color = 'black', width = 3,dash='longdash'),
mode="lines",
name="",showlegend=F)
})
}
}
p
get_nsamples_from_mat <- function(mat,n){
selected_rows <- sample(nrow(mat), n)
selected_matrix <- mat[selected_rows, ]
return(selected_matrix)
}
get_nsamples_from_mat(list_mappings[[1]])
View(list_mappings)
get_nsamples_from_mat(list_mappings[[1]],50)
get_nsamples_from_mat <- function(mat,n=50){
selected_rows <- sample(nrow(mat), n)
selected_matrix <- mat[selected_rows, ]
return(selected_matrix)
}
list_mappings <- list(
"slice0_slice1"=get_positive_mapping(patient_2_align01) %>% get_nsamples_from_mat(),
"slice1_slice2"=get_positive_mapping(patient_2_align12) %>% get_nsamples_from_mat()
)
View(list_mappings)
?sample
get_nsamples_from_mat <- function(mat,n=50,seed=666){
set.seed(666)
selected_rows <- sample(nrow(mat), n)
selected_matrix <- mat[selected_rows, ]
return(selected_matrix)
}
get_nsamples_from_mat(list_mappings[[1]],50)
get_nsamples_from_mat(list_mappings[[1]],50)
get_nsamples_from_mat(list_mappings[[1]],50)
get_nsamples_from_mat(list_mappings[[1]],51)
get_nsamples_from_mat(list_mappings[[1]],15)
get_nsamples_from_mat(list_mappings[[1]],15)
set.seed(666)
get_nsamples_from_mat <- function(mat,n=50){
selected_rows <- sample(nrow(mat), n)
selected_matrix <- mat[selected_rows, ]
return(selected_matrix)
}
list_mappings <- list(
"slice0_slice1"=get_positive_mapping(patient_2_align01) %>% get_nsamples_from_mat(),
"slice1_slice2"=get_positive_mapping(patient_2_align12) %>% get_nsamples_from_mat()
)
p <- plot_ly(df_plot,type = 'scatter3d') %>%
add_markers(x = ~x, y = ~y, z = ~z,color=~clusters)
for (mapping in names(list_mappings)){
slice_split <- str_split_1(mapping,"_")
first_slice <- slice_split[1]
second_slice <- slice_split[2]
for (m in 1:nrow(list_mappings[[mapping]]) ) {
p <- p %>% add_fun(function(plot){
plot %>% filter(!!rlang::parse_expr(paste0(first_slice,"_index==",
list_mappings[[mapping]][m,1],
"|",
second_slice,"_index==",
list_mappings[[mapping]][m,2]))) %>%
add_trace(x = ~x, y = ~y, z = ~z,
line = list(color = 'black', width = 3,dash='longdash'),
mode="lines",
name="",showlegend=F)
})
}
}
p
set.seed(666)
get_nsamples_from_mat <- function(mat,n=200){
selected_rows <- sample(nrow(mat), n)
selected_matrix <- mat[selected_rows, ]
return(selected_matrix)
}
list_mappings <- list(
"slice0_slice1"=get_positive_mapping(patient_2_align01) %>% get_nsamples_from_mat(),
"slice1_slice2"=get_positive_mapping(patient_2_align12) %>% get_nsamples_from_mat()
)
p <- plot_ly(df_plot,type = 'scatter3d') %>%
add_markers(x = ~x, y = ~y, z = ~z,color=~clusters)
for (mapping in names(list_mappings)){
slice_split <- str_split_1(mapping,"_")
first_slice <- slice_split[1]
second_slice <- slice_split[2]
for (m in 1:nrow(list_mappings[[mapping]]) ) {
p <- p %>% add_fun(function(plot){
plot %>% filter(!!rlang::parse_expr(paste0(first_slice,"_index==",
list_mappings[[mapping]][m,1],
"|",
second_slice,"_index==",
list_mappings[[mapping]][m,2]))) %>%
add_trace(x = ~x, y = ~y, z = ~z,
line = list(color = 'black', width = 3,dash='longdash'),
mode="lines",
name="",showlegend=F)
})
}
}
p
df_plot <- Alignment_3Dplot(list_slices = new_slices,z_scale = 20)
set.seed(666)
get_nsamples_from_mat <- function(mat,n=200){
selected_rows <- sample(nrow(mat), n)
selected_matrix <- mat[selected_rows, ]
return(selected_matrix)
}
list_mappings <- list(
"slice0_slice1"=get_positive_mapping(patient_2_align01) %>% get_nsamples_from_mat(),
"slice1_slice2"=get_positive_mapping(patient_2_align12) %>% get_nsamples_from_mat()
)
p <- plot_ly(df_plot,type = 'scatter3d') %>%
add_markers(x = ~x, y = ~y, z = ~z,color=~clusters)
for (mapping in names(list_mappings)){
slice_split <- str_split_1(mapping,"_")
first_slice <- slice_split[1]
second_slice <- slice_split[2]
for (m in 1:nrow(list_mappings[[mapping]]) ) {
p <- p %>% add_fun(function(plot){
plot %>% filter(!!rlang::parse_expr(paste0(first_slice,"_index==",
list_mappings[[mapping]][m,1],
"|",
second_slice,"_index==",
list_mappings[[mapping]][m,2]))) %>%
add_trace(x = ~x, y = ~y, z = ~z,
line = list(color = 'black', width = 3,dash='longdash'),
mode="lines",
name="",showlegend=F)
})
}
}
p
saveRDS(patient_2_align01,file = ("./rds/patient_2_align01.Rds"))
saveRDS(patient_2_align12,file = ("./rds/patient_2_align12.Rds"))
View(patient_2_align01)
View(patient_2_align12)
